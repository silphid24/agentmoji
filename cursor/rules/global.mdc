---
description: 
globs: 
alwaysApply: true
---
## 1. 구현 작업 원칙

- **테스트 우선**: 비즈니스 로직 구현 전, 반드시 테스트를 먼저 작성한다.
- **SOLID 준수**: 5대 원칙에 따라 설계·구현한다.
- **클린 아키텍처**: 계층·의존성 규칙을 지켜 구조를 설계한다.
- UI 작업시에는 구현을 다 끝낸 다음에 테스트 코드를 진행할 것
- UI이외의 코어 로직은 TDD로 구현할 것

## 2. 코드 품질 원칙

- **단순성**: 복잡한 해결책보다 *가장 단순한 솔루션* 을 우선한다.
- **DRY**: 중복을 피하고, 기존 기능을 재사용한다.
- **가드레일**: 테스트 외 환경(개발·프로덕션)에서는 *모의 데이터* 를 사용하지 않는다.
- **효율성**: 명확성을 해치지 않는 범위에서 **토큰 사용**을 최소화한다.

## 3. 리팩터링

- **승인 프로세스**: 리팩터링이 필요할 때, 계획 설명 후 허가를 받아 진행한다.
- **목표 명확화**: *기능 변경 없이* 코드 구조 개선에 집중한다.
- **테스트 통과**: 리팩터링 후 모든 테스트가 통과하는지 확인한다.

## 4. 디버깅

- **원인·해결책 설명**: 디버깅 시 원인과 해결 방안을 문서화하고 허락을 받은 뒤 진행한다.
- **정상 동작이 목표**: 단순 에러 제거가 아닌 *올바른 기능 수행* 을 최우선한다.
- **상세 로그**: 원인이 모호할 경우 추가 로그로 분석 가능성을 높인다.

## 5. 언어

- **리소스 설명**: 관련 설명은 한글로 작성한다.
- **용어 보존**: 기술 용어·라이브러리 이름은 원문 표기를 유지한다.
- **다이어그램**:
    - 간단한 흐름도는 **mermaid** 사용
    - 복잡한 아키텍처는 별도 **SVG** 생성 후 문서 삽입

## 6. 코드 리뷰 원칙

- **PR 크기**: 한 번에 검토 가능한 200-400줄 이내로 제한
- **셀프 리뷰**: PR 생성 전 반드시 본인이 먼저 검토
- **체크리스트**:
    - [ ]  테스트 커버리지 80% 이상
    - [ ]  린트 에러 없음
    - [ ]  성능 영향도 검토
    - [ ]  보안 취약점 스캔

## 7. 에러 처리 전략

- **예외 계층화**: 도메인별 커스텀 예외 클래스 정의
- **에러 경계**: UI 레벨에서 Error Boundary 구현
- **복구 전략**: 재시도 로직과 폴백 메커니즘 구현
- **모니터링**: 에러 발생 시 자동 알림 설정

## 8. 성능 최적화

- **측정 우선**: 최적화 전 반드시 성능 측정
- **임계값 설정**:
    - API 응답: 200ms 이내
    - 페이지 로드: 3초 이내
    - 메모리 사용: 증가율 모니터링
- **캐싱 전략**: 적절한 캐싱 레이어 구현

```markdown
1. README.md 업데이트
   - 프로젝트 개요 및 기능 설명
   - 기술 스택 및 아키텍처 설명
   - 설치 및 실행 방법
   - GitHub Actions 배지 추가

2. 체크리스트 업데이트
   - 완료된 작업 체크
   - 다음 단계 계획

3. 데모 시나리오 문서 작성
   - 개발 과정 및 주요 기능 시연 방법 정리
```